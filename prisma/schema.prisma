// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    relationMode = "prisma"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}
model Review {
    review_id   String   @id @default(cuid())
    title     String 
    description String @db.Text() 
    score Decimal

    id String 
    product Product     @relation(fields: [id], references: [id])

    creator_id String 
    creator User     @relation(fields: [creator_id], references: [id])

    @@index([id])
    @@index([creator_id])
}
model Product {
    id        String   @id @default(cuid())
    title     String 
    description String @db.Text()
    price Int
    picture String
    size String
    reviews Review[]
    cartHolder UserCartProducts[]
}

model UserCartProducts {
  product   Product  @relation(fields:[productId],references: [id])
  productId String  
  user   User @relation(fields: [userId], references: [id])
  userId String 
  assignedAt DateTime @default(now())

  @@id([userId, productId])
  @@index([productId])
  @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    cart          UserCartProducts[]   
    reviews       Review[]    
    driveLink      String?
    createdAt  DateTime @default(now())
}
// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique 
    userId       String   
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
