generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    relationMode = "prisma"
    url      = env("DATABASE_URL")
}
model Review {
    reviewId   String   @id @default(cuid())
    title     String 
    description String @db.Text() 
    score Decimal

    id String 
    product Product     @relation(fields: [id], references: [id])

    creatorId String 
    creator User     @relation(fields: [creatorId], references: [id])

    @@index([id])
    @@index([creatorId])
}

model Product {
    id        String   @id @default(cuid())
    title     String 
    description String @db.Text()
    picture String
    reviews Review[]
    cartHolder UserCartProducts[]
}

model UserCartProducts {
  product   Product  @relation(fields:[productId],references: [id])
  productId String 
  user   User @relation(fields: [userId], references: [id])
  userId String 
  assignedAt DateTime @default(now())
  quantity Int 
  variantId Int
  price Int
  size String

  @@id([userId, productId])
  @@index([productId])
  @@index([userId])
}


model UserAddress {
    id        String   @id @default(cuid())
    user   User @relation(fields: [userId],references: [id]) 
    userId String 
    country String
    region String
    address1 String
    address2 String
    city String
    zip Int
    title String
    @@unique([userId, title], name: "addressIdentifier")
}
model Entity {
id String @id @default(cuid())
ownerId String?
owner User? @relation(name:"connectedEntities",references:[id],fields:[ownerId])
ownerEntityId String?
creatorId String 
creator User @relation(name:"createdEntities",references:[id],fields:[creatorId])
name String
picture String
gallery UserImage[] 
@@index([ownerId])
@@index([creatorId])
@@unique([ownerEntityId,ownerId,creatorId])

}
model UserImage {
    id            String    @id @default(cuid())
    url           String    
    entityId        String @unique
    user          Entity  @relation(fields: [entityId], references: [id])
    createdAt  DateTime @default(now())
    @@index(entityId)
    @@index(id)
}
model Friends {
  id        String      @id @default(cuid())
  user_id   String
  friend_id String
  user      User    @relation(name: "users", fields: [user_id], references: [id])
  friend    User    @relation(name: "friend_users", fields: [friend_id], references: [id])
  status    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@unique([user_id, friend_id])
  @@index([friend_id])
}

model User {
    id            String    @id @default(cuid())
    name           String
    firstName     String?   
    lastName      String?   
    phone         Int?   
    email         String?   
    emailVerified DateTime?
    image         String?
    connectedEntities 	  Entity[] @relation(name:"connectedEntities")
    createdEntities 	  Entity[]@relation(name:"createdEntities")
    userFriends       Friends[] @relation(name: "users")
    friendUserFriends Friends[] @relation(name: "friend_users")
    accounts      Account[]
    sessions      Session[]
    cart          UserCartProducts[]   
    reviews       Review[]    
    address       UserAddress[]
    createdAt     DateTime @default(now())
    @@index([id])
}
// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique 
    userId       String   
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum ProfileType{
    Person
    Pet
}
